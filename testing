//Hi!!
//what's happening?
//how are you?
Yes
<<<<<<< HEAD
hi there
Stephen made changes here

nope

HI THERE

// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.ctre.phoenix.motorcontrol.can.VictorSPX;
import com.ctre.phoenix.motorcontrol.VictorSPXControlMode;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import edu.wpi.first.wpilibj.PS4Controller;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.motorcontrol.PWMVictorSPX;


/**
 * The VM is configured to automatically run this class, and to call the functions corresponding to
 * each mode, as described in the TimedRobot documentation. If you change the name of this class or
 * the package after creating this project, you must also update the build.gradle file in the
 * project.
 */
public class Robot extends TimedRobot {
  private static final String kDefaultAuto = "Default";
  private static final String kCustomAuto = "My Auto";
  private String m_autoSelected;
  private final SendableChooser<String> m_chooser = new SendableChooser<>();
  //private final Timer m_timer = new Timer();

  private PWMVictorSPX leftClimber, rightClimber;
  private CANSparkMax f_leftDrive, f_rightDrive, b_leftDrive, b_rightDrive;
  private DifferentialDrive diffDrive;
  private MotorControllerGroup leftDT, rightDT;

  private PS4Controller controller1;

  private int climberDirection, intakeDirection;
  private VictorSPX intake;

  /**
   * This function is run when the robot is first started up and should be used for any
   * initialization code.
   */
  @Override
  public void robotInit() {
    m_chooser.setDefaultOption("Default Auto", kDefaultAuto);
    m_chooser.addOption("My Auto", kCustomAuto);
    SmartDashboard.putData("Auto choices", m_chooser);

    leftClimber = new PWMVictorSPX(1);
    rightClimber = new PWMVictorSPX(0);

    intake =  new VictorSPX(5);

    f_leftDrive = new CANSparkMax(1, MotorType.kBrushless);
    b_leftDrive = new CANSparkMax(2, MotorType.kBrushless);
    f_rightDrive = new CANSparkMax(3, MotorType.kBrushless);
    b_rightDrive = new CANSparkMax(4, MotorType.kBrushless);

    f_leftDrive.restoreFactoryDefaults();
    b_leftDrive.restoreFactoryDefaults();
    f_rightDrive.restoreFactoryDefaults();
    b_rightDrive.restoreFactoryDefaults();

    leftDT = new MotorControllerGroup(f_leftDrive, b_leftDrive);
    rightDT = new MotorControllerGroup(f_rightDrive, b_rightDrive);
    diffDrive = new DifferentialDrive (leftDT,rightDT);

    controller1 = new PS4Controller(0);
  

  }

  /**
   * This function is called every 20 ms, no matter the mode. Use this for items like diagnostics
   * that you want ran during disabled, autonomous, teleoperated and test.
   *
   * <p>This runs after the mode specific periodic functions, but before LiveWindow and
   * SmartDashboard integrated updating.
   */
  @Override
  public void robotPeriodic() {}

  /**
   * This autonomous (along with the chooser code above) shows how to select between different
   * autonomous modes using the dashboard. The sendable chooser code works with the Java
   * SmartDashboard. If you prefer the LabVIEW Dashboard, remove all of the chooser code and
   * uncomment the getString line to get the auto name from the text box below the Gyro
   *
   * <p>You can add additional auto modes by adding additional comparisons to the switch structure
   * below with additional strings. If using the SendableChooser make sure to add them to the
   * chooser code above as well.
   */
  @Override
  public void autonomousInit() {
    m_autoSelected = m_chooser.getSelected();
    // m_autoSelected = SmartDashboard.getString("Auto Selector", kDefaultAuto);
    System.out.println("Auto selected: " + m_autoSelected);

  }

  /** This function is called periodically during autonomous. */
  @Override
  public void autonomousPeriodic() {
    switch (m_autoSelected) {
      case kCustomAuto:
        // Put custom auto code here
        break;
      case kDefaultAuto:
      default:
        // Put default auto code here
        break;
    }
  }

  /** This function is called once when teleop is enabled. */
  @Override
  public void teleopInit() {}

  /** This function is called periodically during operator control. */
  @Override
  public void teleopPeriodic() {
    leftClimber.set(climberDirection*0.25*(0.5+0.5*controller1.getR2Axis()));
    rightClimber.set(climberDirection*0.25*(0.5+0.5*controller1.getR2Axis()));
    climberDirection = controller1.getR1Button ()? 1:-1;
    intakeDirection = controller1.getL1Button ()? -1:1;
    intake.set(VictorSPXControlMode.PercentOutput, intakeDirection*(0.5+0.5*controller1.getL2Axis()));
    diffDrive.tankDrive(-controller1.getLeftY()*.6, controller1.getRightY()*.6);
  }

  /** This function is called once when the robot is disabled. *
  @Override
  public void disabledInit() {}

  /** This function is called periodically when disabled. */
  @Override
  public void disabledPeriodic() {}

  /** This function is called once when test mode is enabled. */
  @Override
  public void testInit() {}

  /** This function is called periodically during test mode. */
  @Override
  public void testPeriodic() {}

  /** This function is called once when the robot is first started up. */
  @Override
  public void simulationInit() {}

  /** This function is called periodically whilst in simulation. */
  @Override
  public void simulationPeriodic() {}
}
